name: ci

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
  push:
    branches:
      - 'master'
  pull_request:

env:
  GO_VERSION: 1.22
  SETUP_BUILDX_VERSION: latest
  SETUP_BUILDKIT_IMAGE: moby/buildkit:latest
  BUILDKIT_CACHE_REPO: ghcr.io/moby/buildkit-bench-cache

jobs:
  prepare:
    runs-on: ubuntu-24.04
    outputs:
      includes: ${{ steps.set.outputs.includes }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      -
        name: List candidates
        run: |
          go run -mod=vendor ./cmd/refcandidates
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REFS: master
          LAST_DAYS: 7
          LAST_RELEASES: 3
          RESULT_FILE: ./bin/candidates.json
      -
        name: Set outputs
        id: set
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const data = JSON.parse(fs.readFileSync('./bin/candidates.json', 'utf8'));
            let includes = [];
            for (const [key, value] of Object.entries(data.refs)) {
              includes.push({type: "ref", ref: key, commit: value});
            }
            for (const [key, value] of Object.entries(data.releases)) {
              includes.push({type: "release", ref: key, commit: value});
            }
            for (const [key, value] of Object.entries(data.commits)) {
              includes.push({type: "commit", ref: value, commit: value});
            }
            core.info(JSON.stringify(includes, null, 2));
            core.setOutput('includes', JSON.stringify(includes ?? []));

  test:
    runs-on: ubuntu-24.04
    needs:
      - prepare
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.prepare.outputs.includes) }}
    env:
      TESTFLAGS: -v --timeout=30m
      TEST_IMAGE_BUILD: 0
      TEST_IMAGE_ID: buildkit-bench
      BUILDKIT_RUN_COUNT: 3
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: ${{ env.SETUP_BUILDX_VERSION }}
          driver-opts: image=${{ env.SETUP_BUILDKIT_IMAGE }}
          buildkitd-flags: --debug
      -
        name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Build test image
        uses: docker/bake-action@v5
        with:
          targets: tests
          set: |
            *.output=type=docker,name=${{ env.TEST_IMAGE_ID }}
            *.cache-to=type=registry,ignore-error=true,ref=${{ env.BUILDKIT_CACHE_REPO }}:${{ matrix.commit }}
            *.cache-to=type=registry,ignore-error=true,ref=${{ env.BUILDKIT_CACHE_REPO }}:${{ matrix.type }}-${{ matrix.ref }}
        env:
          BUILDKIT_REF: ${{ matrix.ref }}
          BUILDKIT_REF_TYPE: ${{ matrix.type }}
          BUILDKIT_REF_COMMIT: ${{ matrix.commit }}
      -
        name: Test
        run: |
          ./hack/test
